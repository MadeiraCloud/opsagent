grains/core.py:    'cmd.run_all': salt.modules.cmdmod._run_all_quiet
grains/core.py:        ret = __salt__['cmd.run_all'](cmd)
grains/core.py:            result = __salt__['cmd.run_all']('{0} -n {1}'.format(sysctl, oid))
modules/file.py:    return __salt__['cmd.run_all'](cmd)
modules/file.py:    return __salt__['cmd.run_all'](cmd)
modules/file.py:        ret = __salt__['cmd.run_all'](cmd)
modules/win_ip.py:    result = __salt__['cmd.run_all'](cmd)
modules/lvs.py:    out = __salt__['cmd.run_all'](cmd)
modules/lvs.py:    out = __salt__['cmd.run_all'](cmd)
modules/lvs.py:    out = __salt__['cmd.run_all'](cmd)
modules/lvs.py:    out = __salt__['cmd.run_all'](cmd)
modules/lvs.py:    out = __salt__['cmd.run_all'](cmd)
modules/lvs.py:    out = __salt__['cmd.run_all'](cmd)
modules/lvs.py:    out = __salt__['cmd.run_all'](cmd)
modules/lvs.py:    out = __salt__['cmd.run_all'](cmd)
modules/lvs.py:    out = __salt__['cmd.run_all'](cmd)
modules/groupadd.py:    ret = __salt__['cmd.run_all'](cmd)
modules/groupadd.py:    ret = __salt__['cmd.run_all']('groupdel {0}'.format(name))
modules/cmdmod.py:        salt '*' cmd.run_all "ls -l | awk '/foo/{print \\$2}'"
modules/cmdmod.py:        salt '*' cmd.run_all template=jinja "ls -l /tmp/{{grains.id}} | awk '/foo/{print \\$2}'"
modules/cmdmod.py:        salt '*' cmd.run_all "grep f" stdin='one\\ntwo\\nthree\\nfour\\nfive\\n'
modules/ebuild.py:    call = __salt__['cmd.run_all'](cmd, output_loglevel='debug')
modules/ebuild.py:    call = __salt__['cmd.run_all'](cmd, output_loglevel='debug')
modules/ebuild.py:    call = __salt__['cmd.run_all'](cmd, output_loglevel='debug')
modules/ebuild.py:    __salt__['cmd.run_all'](cmd, output_loglevel='debug')
modules/ebuild.py:    __salt__['cmd.run_all'](cmd, output_loglevel='debug')
modules/win_shadow.py:    ret = __salt__['cmd.run_all'](cmd)
modules/seed.py:    res = __salt__['cmd.run_all'](cmd, output_loglevel='quiet')
modules/solaris_shadow.py:    output = __salt__['cmd.run_all']('passwd -s {0}'.format(name))
modules/pkg_resource.py:        result = __salt__['cmd.run_all']('pacman -Qpi "{0}"'.format(path))
modules/pkg_resource.py:        result = __salt__['cmd.run_all']('dpkg-deb -I "{0}"'.format(path))
modules/composer.py:    result = __salt__['cmd.run_all'](cmd, runas=runas, env={'COMPOSER_HOME': composer_home})
modules/zfs.py:    res = salt_cmd.run_all('{0} help || :'.format(zfs_path))
modules/zfs.py:        res = salt_cmd.run_all(
modules/pw_group.py:    ret = __salt__['cmd.run_all'](cmd)
modules/pw_group.py:    ret = __salt__['cmd.run_all']('pw groupdel {0}'.format(name))
modules/smartos_vmadm.py:        res = __salt__['cmd.run_all'](cmd)
modules/smartos_vmadm.py:        res = __salt__['cmd.run_all'](cmd)
modules/smartos_vmadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/smartos_vmadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/smartos_vmadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/smartos_vmadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/smartos_vmadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/smartos_vmadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/smartos_vmadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/smartos_vmadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/smartos_vmadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/smartos_vmadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/pkgutil.py:    __salt__['cmd.run_all'](cmd)
modules/pkgutil.py:    output = __salt__['cmd.run_all'](cmd).get('stdout', '').splitlines()
modules/pkgutil.py:    __salt__['cmd.run_all'](cmd)
modules/pkgutil.py:    __salt__['cmd.run_all'](cmd)
modules/rvm.py:    ret = __salt__['cmd.run_all'](' '.join(cmd), runas=runas)
modules/rvm.py:    ret = __salt__['cmd.run_all'](
modules/linux_sysctl.py:    data = __salt__['cmd.run_all'](cmd)
modules/freebsdports.py:    result = __salt__['cmd.run_all'](
modules/freebsdports.py:        result = __salt__['cmd.run_all']('make showconfig', cwd=portpath)
modules/freebsdports.py:    result = __salt__['cmd.run_all']('portsnap fetch')
modules/freebsdports.py:        result = __salt__['cmd.run_all']('portsnap extract')
modules/freebsdports.py:    result = __salt__['cmd.run_all']('portsnap update')
modules/hg.py:    result = __salt__['cmd.run_all'](cmd, cwd=cwd, runas=user)
modules/alternatives.py:    out = __salt__['cmd.run_all'](cmd, python_shell=False)
modules/alternatives.py:    out = __salt__['cmd.run_all'](cmd, python_shell=False)
modules/alternatives.py:    out = __salt__['cmd.run_all'](cmd, python_shell=False)
modules/alternatives.py:    out = __salt__['cmd.run_all'](cmd, python_shell=False)
modules/alternatives.py:    out = __salt__['cmd.run_all'](cmd, python_shell=False)
modules/win_groupadd.py:    ret = __salt__['cmd.run_all'](cmd)
modules/win_groupadd.py:    ret = __salt__['cmd.run_all']('net localgroup {0} /delete'.format(name))
modules/apache.py:    out = __salt__['cmd.run_all'](cmd)
modules/lxc.py:    ret = __salt__['cmd.run_all'](cmd)
modules/lxc.py:    ret = __salt__['cmd.run_all'](cmd)
modules/lxc.py:    ret = __salt__['cmd.run_all'](cmd)
modules/lxc.py:    ret = __salt__['cmd.run_all'](cmd)
modules/pip.py:        output = __salt__['cmd.run_all'](pip_version_cmd).get('stdout', '')
modules/pip.py:        return __salt__['cmd.run_all'](' '.join(cmd), **cmd_kwargs)
modules/pip.py:        return __salt__['cmd.run_all'](' '.join(cmd), **cmd_kwargs)
modules/pip.py:    result = __salt__['cmd.run_all'](' '.join(cmd), **cmd_kwargs)
modules/pip.py:        pip_version_result = __salt__['cmd.run_all'](' '.join(pip_version_cmd),
modules/pip.py:    result = __salt__['cmd.run_all'](' '.join(cmd), **cmd_kwargs)
modules/apt.py:        out = __salt__['cmd.run_all'](cmd, python_shell=False,
modules/apt.py:    out = __salt__['cmd.run_all'](cmd).get('stdout', '')
modules/apt.py:                ret = __salt__['cmd.run_all'](
modules/apt.py:                result = __salt__['cmd.run_all'](cmd, output_loglevel='debug')
modules/apt.py:                    result = __salt__['cmd.run_all'](
modules/pkgin.py:    ret = __salt__['cmd.run_all'](cmd, output_loglevel='debug')
modules/solaris_group.py:    ret = __salt__['cmd.run_all'](cmd)
modules/solaris_group.py:    ret = __salt__['cmd.run_all']('groupdel {0}'.format(name))
modules/bsd_shadow.py:            change, expire = __salt__['cmd.run_all'](cmd)['stdout'].split(':')
modules/netbsd_sysctl.py:    data = __salt__['cmd.run_all'](cmd)
modules/launchctl.py:                    plist_xml = __salt__['cmd.run_all'](cmd)['stdout']
modules/launchctl.py:    launchctl_xml = __salt__['cmd.run_all'](cmd, runas=runas)
modules/virtualenv_mod.py:            ret = __salt__['cmd.run_all'](version_cmd, runas=user)
modules/virtualenv_mod.py:    ret = __salt__['cmd.run_all'](' '.join(cmd), runas=user)
modules/virtualenv_mod.py:        return __salt__['cmd.run_all'](
modules/svn.py:    result = __salt__['cmd.run_all'](cmd, cwd=cwd, runas=user, **kwargs)
modules/git.py:    'cmd.run_all', and used as an alternative to 'cmd.run_all'. Some
modules/git.py:    commands don't return proper retcodes, so this can't replace 'cmd.run_all'.
modules/git.py:    result = __salt__['cmd.run_all'](cmd,
modules/freebsdpkg.py:    ret = __salt__['cmd.run_all'](cmd, output_loglevel='debug')
modules/supervisord.py:    ret = __salt__['cmd.run_all'](
modules/supervisord.py:    ret = __salt__['cmd.run_all'](
modules/supervisord.py:    ret = __salt__['cmd.run_all'](
modules/supervisord.py:    ret = __salt__['cmd.run_all'](
modules/supervisord.py:    ret = __salt__['cmd.run_all'](
modules/supervisord.py:    ret = __salt__['cmd.run_all'](
modules/supervisord.py:    ret = __salt__['cmd.run_all'](
modules/supervisord.py:    ret = __salt__['cmd.run_all'](
modules/supervisord.py:    ret = __salt__['cmd.run_all'](
modules/test.py:    ret = __salt__['cmd.run_all'](cmd)
modules/mount.py:    out = __salt__['cmd.run_all'](cmd)
modules/mount.py:        out = __salt__['cmd.run_all'](cmd)
modules/mount.py:    out = __salt__['cmd.run_all'](cmd)
modules/gnomedesktop.py:        result = __salt__['cmd.run_all'](cmd, runas=user, env=environ)
modules/gnomedesktop.py:        result = __salt__['cmd.run_all'](cmd, runas=user, env=environ)
modules/pw_user.py:    ret = __salt__['cmd.run_all'](cmd)
modules/pw_user.py:    ret = __salt__['cmd.run_all'](cmd)
modules/mac_user.py:    return __salt__['cmd.run_all'](
modules/linux_lvm.py:    cmd_ret = __salt__['cmd.run_all'](cmd)
modules/linux_lvm.py:    cmd_ret = __salt__['cmd.run_all'](cmd)
modules/linux_lvm.py:    cmd_ret = __salt__['cmd.run_all'](cmd)
modules/rh_service.py:    result = __salt__['cmd.run_all'](cmdline)
modules/cron.py:    return __salt__['cmd.run_all'](_get_cron_cmdstr(user, path))
modules/cron.py:    ret = __salt__['cmd.run_all'](_get_cron_cmdstr(user, path))
modules/openstack_config.py:    result = __salt__['cmd.run_all'](
modules/openstack_config.py:    result = __salt__['cmd.run_all'](
modules/openstack_config.py:    result = __salt__['cmd.run_all'](
modules/dpkg.py:    out = __salt__['cmd.run_all'](cmd)
modules/dpkg.py:    out = __salt__['cmd.run_all'](cmd)
modules/dpkg.py:    out = __salt__['cmd.run_all'](cmd)
modules/moosefs.py:    out = __salt__['cmd.run_all'](cmd)
modules/moosefs.py:    out = __salt__['cmd.run_all'](cmd)
modules/moosefs.py:    out = __salt__['cmd.run_all'](cmd)
modules/moosefs.py:    out = __salt__['cmd.run_all'](cmd)
modules/smartos_imgadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/smartos_imgadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/smartos_imgadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/smartos_imgadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/smartos_imgadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/smartos_imgadm.py:    res = __salt__['cmd.run_all'](cmd)
modules/gem.py:    ret = __salt__['cmd.run_all'](
modules/darwin_sysctl.py:    data = __salt__['cmd.run_all'](cmd)
modules/freebsd_sysctl.py:    data = __salt__['cmd.run_all'](cmd)
modules/zcbuildout.py:    ret = __salt__['cmd.run_all'](command, cwd=directory, runas=runas, env=env)
modules/postgres.py:              run_cmd="cmd.run_all"):
modules/solaris_user.py:    ret = __salt__['cmd.run_all'](cmd)
modules/incron.py:    return __salt__['cmd.run_all'](_get_incron_cmdstr(user, path))
modules/incron.py:        ret = __salt__['cmd.run_all'](_get_incron_cmdstr(user, path))
modules/powerpath.py:    ret = __salt__['cmd.run_all'](cmd)
modules/powerpath.py:    ret = __salt__['cmd.run_all'](cmd)
modules/chocolatey.py:            result = __salt__['cmd.run_all'](dest + ' /quiet /norestart')
modules/chocolatey.py:    result = __salt__['cmd.run_all'](dest + ' /q /norestart')
modules/chocolatey.py:    result = __salt__['cmd.run_all'](
modules/chocolatey.py:    result = __salt__['cmd.run_all'](cmd)
modules/chocolatey.py:    result = __salt__['cmd.run_all'](cmd)
modules/chocolatey.py:    result = __salt__['cmd.run_all'](cmd)
modules/chocolatey.py:    result = __salt__['cmd.run_all'](cmd)
modules/chocolatey.py:    result = __salt__['cmd.run_all'](cmd)
modules/chocolatey.py:    result = __salt__['cmd.run_all'](cmd)
modules/chocolatey.py:    result = __salt__['cmd.run_all'](cmd)
modules/chocolatey.py:    result = __salt__['cmd.run_all'](cmd)
modules/chocolatey.py:    result = __salt__['cmd.run_all'](cmd)
modules/chocolatey.py:    result = __salt__['cmd.run_all'](cmd)
modules/chocolatey.py:    result = __salt__['cmd.run_all'](cmd)
modules/chocolatey.py:    result = __salt__['cmd.run_all'](cmd)
modules/chocolatey.py:    result = __salt__['cmd.run_all'](cmd)
modules/freebsdkmod.py:    __salt__['cmd.run_all']('kldload {0}'.format(mod))
modules/freebsdkmod.py:    __salt__['cmd.run_all']('kldunload {0}'.format(mod))
modules/npm.py:    result = __salt__['cmd.run_all'](cmd, cwd=dir, runas=runas)
modules/npm.py:    result = __salt__['cmd.run_all'](cmd, cwd=dir, runas=runas)
modules/npm.py:    result = __salt__['cmd.run_all'](cmd, cwd=dir)
modules/quota.py:    result = __salt__['cmd.run_all'](cmd)
modules/kmod.py:    response = __salt__['cmd.run_all']('modprobe {0}'.format(mod))
modules/kmod.py:    __salt__['cmd.run_all']('modprobe -r {0}'.format(mod))
modules/win_useradd.py:    ret = __salt__['cmd.run_all']('net user {0} /add'.format(name))
modules/win_useradd.py:    ret = __salt__['cmd.run_all']('net user {0} /delete'.format(name))
modules/win_useradd.py:    ret = __salt__['cmd.run_all']('net user {0} {1}'.format(name, password))
modules/win_useradd.py:    ret = __salt__['cmd.run_all'](
modules/win_useradd.py:    ret = __salt__['cmd.run_all'](
modules/nginx.py:    out = __salt__['cmd.run_all'](cmd)
modules/dockerio.py:        status, container, 'cmd.run_all', cmd, *args, **kwargs)
modules/rbenv.py:    result = __salt__['cmd.run_all'](
modules/rbenv.py:    result = __salt__['cmd.run_all'](
modules/pecl.py:    ret = __salt__['cmd.run_all'](cmdline)
modules/dig.py:    cmd = __salt__['cmd.run_all'](' '.join(dig))
modules/dig.py:    cmd = __salt__['cmd.run_all'](' '.join(dig))
modules/dig.py:    cmd = __salt__['cmd.run_all'](' '.join(dig))
modules/dig.py:    cmd = __salt__['cmd.run_all'](' '.join(dig))
modules/dig.py:    cmd = __salt__['cmd.run_all'](' '.join(dig))
modules/useradd.py:    ret = __salt__['cmd.run_all'](' '.join(cmd))
modules/useradd.py:    ret = __salt__['cmd.run_all'](' '.join(cmd))
modules/puppet.py:        Format the command string to executed using cmd.run_all.
modules/puppet.py:    return __salt__['cmd.run_all'](repr(puppet))
states/cmd.py:                cmd_all = __salt__['cmd.run_all'](
states/archive.py:        results = __salt__['cmd.run_all']('tar -xv{0}f {1}'.format(tar_options,
